{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/scnrm2.js","../lib/main.js","../lib/index.js","../0280e867e60d84906ffe099cd95332"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport FLOAT32_MAX from '@stdlib/constants-float32-max';\nimport absf from '@stdlib/math-base-special-absf';\nimport abs2f from '@stdlib/math-base-special-abs2f';\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex64';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tax = absf( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX ) {\n\tvar ox;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( strideX < 0 ) {\n\t\tox = ( 1 - N ) * strideX;\n\t} else {\n\t\tox = 0;\n\t}\n\treturn ndarray( N, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport scnrm2 from './scnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the L2-norm of a complex single-precision floating-point vector.\n*\n* @module @stdlib/blas-base-scnrm2\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import scnrm2 from '@stdlib/blas-base-scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import scnrm2 from '@stdlib/blas-base-scnrm2';\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2.ndarray( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scnrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscnrm2 = main;\n} else {\n\tscnrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scnrm2;\n\n// exports: { \"ndarray\": \"scnrm2.ndarray\" }\n","export default '/home/runner/work/blas-base-scnrm2/blas-base-scnrm2/lib'"],"names":["tsml","tbig","ssml","sbig","scnrm2","N","cx","strideX","offsetX","notbig","sumsq","viewX","abig","amed","asml","ymax","ymin","scl","ax","ix","sx","i","reinterpret","absf","f32","abs2f","FLOAT32_MAX","sqrtf","ndarray","setReadOnly","tmp","tryRequire","join","require$$0","scnrm2$1","isError","main"],"mappings":";;61GAiCIA,EAAO,cACPC,EAAO,YACPC,EAAO,aACPC,EAAO,cAsBX,SAASC,EAAQC,EAAGC,EAAIC,EAASC,GAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKhB,GAAK,EACT,OAAO,EAiBR,IAdAM,EAAQW,EAAahB,EAAI,GACzBc,EAAe,EAAVb,EACLY,EAAe,EAAVX,EAGLC,GAAS,EAETC,EAAQ,EACRE,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAI,EAAI,EAAGA,EAAIhB,EAAGgB,KACnBH,EAAKK,EAAMZ,EAAOQ,KACRlB,GACTW,EAAOY,EAAKZ,EAAOa,EAAOP,EAAKf,IAC/BM,GAAS,GACES,EAAKlB,EACXS,IACJK,EAAOU,EAAKV,EAAOW,EAAOP,EAAKhB,KAGhCW,EAAOW,EAAKX,EAAOW,EAAKN,EAAKA,KAE9BA,EAAKK,EAAMZ,EAAOQ,EAAK,KACblB,GACTW,EAAOY,EAAKZ,EAAOa,EAAOP,EAAKf,IAC/BM,GAAS,GACES,EAAKlB,EACXS,IACJK,EAAOU,EAAKV,EAAOW,EAAOP,EAAKhB,KAGhCW,EAAOW,EAAKX,EAAOW,EAAKN,EAAKA,IAE9BC,GAAMC,EAiCP,OA9BKR,EAAO,IAENC,EAAO,GAASA,EAAOa,GAAmBb,GAASA,KACvDD,EAAOY,EAAKZ,EAAOY,EAAKA,EAAKX,EAAOV,GAASA,KAE9Cc,EAAMO,EAAK,EAAMrB,GACjBO,EAAQE,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAOa,GAAiBb,GAASA,GACnDA,EAAOc,EAAOd,IACdC,EAAOU,EAAKG,EAAOb,GAASZ,IAChBW,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNP,EAAQc,EAAKA,EAAKT,EAAOA,GAASS,EAAK,EAAMC,EAAOT,EAAOD,OAE3DE,EAAMO,EAAK,EAAMtB,GACjBQ,EAAQI,IAITG,EAAM,EACNP,EAAQG,GAEFW,EAAKG,EAAOjB,GAAUO,EAC9B,CCzGA,SAASb,EAAQC,EAAGC,EAAIC,GAEvB,OAAKF,GAAK,EACF,EAODuB,EAASvB,EAAGC,EAAIC,EALlBA,EAAU,GACP,EAAIF,GAAME,EAEZ,EAGP,CCzBAsB,EAAAzB,EAAA,UAAAwB,GCiBA,IAQAxB,EACA0B,EAAAC,GAAAC,EATAC,EAAAD,MC9Ce,0DDuDf,gBAUAE,EARA9B,EADA+B,EAAAL,GACAM,EAEAN"}