{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/scnrm2.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar FLOAT32_MAX = require( '@stdlib/constants-float32-max' );\nvar absf = require( '@stdlib/math-base-special-absf' );\nvar abs2f = require( '@stdlib/math-base-special-abs2f' );\nvar sqrtf = require( '@stdlib/math-base-special-sqrtf' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} L2-norm\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX, offsetX ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar viewX;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Reinterpret the input array as a real-valued array comprised of interleaved real and imaginary components:\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( viewX[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tax = absf( viewX[ ix + 1 ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += sx;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scnrm2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a complex single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideX - `cx` stride length\n* @returns {number} L2-norm\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*/\nfunction scnrm2( N, cx, strideX ) {\n\tvar ox;\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( strideX < 0 ) {\n\t\tox = ( 1 - N ) * strideX;\n\t} else {\n\t\tox = 0;\n\t}\n\treturn ndarray( N, cx, strideX, ox );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scnrm2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar scnrm2 = require( './scnrm2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scnrm2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the L2-norm of a complex single-precision floating-point vector.\n*\n* @module @stdlib/blas-base-scnrm2\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var scnrm2 = require( '@stdlib/blas-base-scnrm2' );\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2( 4, cx, 1 );\n* // returns ~0.8\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var scnrm2 = require( '@stdlib/blas-base-scnrm2' );\n*\n* var cx = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );\n*\n* var norm = scnrm2.ndarray( 4, cx, 1, 0 );\n* // returns ~0.8\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar scnrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscnrm2 = main;\n} else {\n\tscnrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scnrm2;\n\n// exports: { \"ndarray\": \"scnrm2.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "f32", "FLOAT32_MAX", "absf", "abs2f", "sqrtf", "reinterpret", "tsml", "tbig", "ssml", "sbig", "scnrm2", "N", "cx", "strideX", "offsetX", "notbig", "sumsq", "viewX", "abig", "amed", "asml", "ymax", "ymin", "scl", "ax", "ix", "sx", "i", "require_scnrm2", "__commonJSMin", "exports", "module", "ndarray", "scnrm2", "N", "cx", "strideX", "ox", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "scnrm2", "ndarray", "join", "tryRequire", "isError", "main", "scnrm2", "tmp"]
}
